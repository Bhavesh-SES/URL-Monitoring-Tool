<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <title>URL Monitor Tool</title>
  <script src="https://cdn.jsdelivr.net/npm/papaparse@5.4.1/papaparse.min.js"></script>
  <script src="https://cdn.dashjs.org/latest/dash.all.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/hls.js@1.5.5/dist/hls.min.js"></script>
  <style>
    body {
      margin: 0;
      font-family: Arial, sans-serif;
      transition: background 0.3s, color 0.3s;
    }
    body.light { background: #f9f9f9; color: #222; }
    body.dark { background: #121212; color: #eee; }

    header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 10px 20px;
      background: #333;
      color: #fff;
    }

    .theme-toggle, .mute-toggle, .mute-all-toggle {
      padding: 5px 10px;
      margin-left: 10px;
      cursor: pointer;
    }

    .controls {
      text-align: center;
      padding: 20px;
    }

    .grid {
      display: grid;
      gap: 15px;
      padding: 10px;
      justify-content: center;
    }

    .player-box {
      width: 400px;
      background: #fff;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }

    body.dark .player-box {
      background: #1e1e1e;
    }

    video, iframe {
      width: 100%;
      height: 225px;
      background: black;
    }

    .alert {
      color: red;
      padding: 5px;
      text-align: center;
      font-size: 0.85em;
    }

    input[type="file"] {
      margin: 10px;
    }

    .pagination, .log-download {
      text-align: center;
      margin: 15px;
    }

    .pagination button {
      padding: 5px 10px;
      margin: 5px;
    }

    .log-download button {
      padding: 8px 16px;
      margin: 10px;
    }
  </style>
</head>
<body class="light">

  <header>
    <div><strong>URL Monitor Tool</strong></div>
    <div>
      <button class="theme-toggle" onclick="toggleTheme()">🌗 Theme</button>
      <button class="mute-toggle" onclick="toggleMute()">🔔 Mute Alarm: <span id="muteStatus">OFF</span></button>
      <button class="mute-all-toggle" onclick="toggleMuteAll()">🔇 Mute All URLs: <span id="muteAllStatus">ON</span></button>
    </div>
  </header>

  <div class="controls">
    <label>Rows: <input type="number" id="rows" value="2" min="1"></label>
    <label>Columns: <input type="number" id="cols" value="2" min="1"></label>
    <label>Max Players Per Page: <input type="number" id="maxPerPage" value="6" min="1"></label>
    <label>Auto Refresh (min): <input type="number" id="refresh" value="1" min="1"></label>
    <br><br>
    <button onclick="applyLayout()">Apply Layout</button>
    <br><br>
    <input type="file" id="csvFile" accept=".csv">
    <p>Or drag and drop CSV anywhere on page</p>
  </div>

  <div class="grid" id="grid"></div>

  <div class="pagination">
    <button onclick="prevPage()">⬅ Prev</button>
    <span id="pageIndicator">Page 1</span>
    <button onclick="nextPage()">Next ➡</button>
  </div>

  <div class="log-download">
    <button onclick="downloadLog()">📥 Download Summary Log</button>
  </div>

  <audio id="alertSound" src="alert.mp3" preload="auto"></audio>
<script>
  let videoData = [];
  let refreshInterval;
  let currentPage = 0;
  let boxesPerPage = 6;
  let isMuted = false;
  let isAllMuted = true;
  let errorLog = [];

  const grid = document.getElementById("grid");
  const alertSound = document.getElementById("alertSound");

  document.body.addEventListener("dragover", e => e.preventDefault());
  document.body.addEventListener("drop", e => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file && file.type === "text/csv") loadCSV(file);
  });

  document.getElementById("csvFile").addEventListener("change", function () {
    const file = this.files[0];
    if (file) loadCSV(file);
  });

  function toggleTheme() {
    document.body.classList.toggle("dark");
    document.body.classList.toggle("light");
  }

  function toggleMute() {
    isMuted = !isMuted;
    document.getElementById("muteStatus").innerText = isMuted ? "ON" : "OFF";
  }

  function toggleMuteAll() {
    isAllMuted = !isAllMuted;
    document.getElementById("muteAllStatus").innerText = isAllMuted ? "ON" : "OFF";
    document.querySelectorAll("video").forEach(v => v.muted = isAllMuted);
  }

  function loadCSV(file) {
    Papa.parse(file, {
      header: false,
      skipEmptyLines: true,
      complete: function (results) {
        videoData = results.data;
        alert("CSV loaded! Now click Apply Layout.");
      }
    });
  }

  function applyLayout() {
    const rows = parseInt(document.getElementById("rows").value);
    const cols = parseInt(document.getElementById("cols").value);
    boxesPerPage = parseInt(document.getElementById("maxPerPage").value) || (rows * cols);
    currentPage = 0;
    grid.style.gridTemplateColumns = `repeat(${cols}, 400px)`;
    setupAutoRefresh();
    renderPage();
  }

  function setupAutoRefresh() {
    clearInterval(refreshInterval);
    const mins = parseInt(document.getElementById("refresh").value) || 1;
    refreshInterval = setInterval(renderPage, mins * 60000);
  }

  function renderPage() {
    grid.innerHTML = '';
    const start = currentPage * boxesPerPage;
    const end = start + boxesPerPage;
    const pageData = videoData.slice(start, end);

    document.getElementById("pageIndicator").innerText = `Page ${currentPage + 1}`;

    pageData.forEach(([name, url], i) => {
      const box = document.createElement("div");
      box.className = "player-box";
      box.innerHTML = `
        <div><strong>${name}</strong></div>
        <div class="media" id="media-${i}"></div>
        <div class="alert" id="alert-${i}"></div>
      `;
      grid.appendChild(box);

      const mediaDiv = box.querySelector(".media");
      const alertDiv = box.querySelector(".alert");
      alertDiv.textContent = "";

      const timestamp = new Date().toISOString();

      if (url.endsWith(".m3u8")) {
        const video = document.createElement("video");
        video.controls = true;
        video.autoplay = true;
        video.muted = isAllMuted;
        mediaDiv.appendChild(video);

        if (Hls.isSupported()) {
          const hls = new Hls();
          hls.loadSource(url);
          hls.attachMedia(video);
          hls.on(Hls.Events.ERROR, () => {
            alertDiv.textContent = "⚠️ HLS Failed";
            if (!isMuted) alertSound.play().catch(() => {});
            errorLog.push({ name, url, timestamp, status: "HLS Error" });
          });
        } else {
          video.src = url;
          video.onerror = () => {
            alertDiv.textContent = "⚠️ Native HLS Error";
            if (!isMuted) alertSound.play().catch(() => {});
            errorLog.push({ name, url, timestamp, status: "Native HLS Error" });
          };
        }
      } else if (url.endsWith(".mpd")) {
        const video = document.createElement("video");
        video.controls = true;
        video.autoplay = true;
        video.muted = isAllMuted;
        mediaDiv.appendChild(video);
        try {
          dashjs.MediaPlayer().create().initialize(video, url, true);
        } catch (e) {
          alertDiv.textContent = "⚠️ DASH Failed";
          if (!isMuted) alertSound.play().catch(() => {});
          errorLog.push({ name, url, timestamp, status: "DASH Error" });
        }
      } else {
        const iframe = document.createElement("iframe");
        iframe.src = url;
        iframe.onerror = () => {
          alertDiv.textContent = "⚠️ iFrame Failed";
          if (!isMuted) alertSound.play().catch(() => {});
          errorLog.push({ name, url, timestamp, status: "Iframe Error" });
        };
        mediaDiv.appendChild(iframe);
      }
    });
  }

  function prevPage() {
    if (currentPage > 0) {
      currentPage--;
      renderPage();
    }
  }

  function nextPage() {
    const maxPage = Math.ceil(videoData.length / boxesPerPage) - 1;
    if (currentPage < maxPage) {
      currentPage++;
      renderPage();
    }
  }

  function downloadLog() {
    if (errorLog.length === 0) {
      alert("No playback issues to download.");
      return;
    }

    const csv = "Name,URL,Timestamp,Status\n" + errorLog.map(e =>
      `"${e.name}","${e.url}","${e.timestamp}","${e.status}"`
    ).join("\n");

    const blob = new Blob([csv], { type: "text/csv" });
    const link = document.createElement("a");
    link.href = URL.createObjectURL(blob);
    link.download = `PlaybackErrors_${new Date().toISOString()}.csv`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  }
</script>
</body>
</html>
